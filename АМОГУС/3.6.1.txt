#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> SegmentsCover(std::vector<std::pair<int, int>> &segments) {
    std::vector<int> points;
    while (!segments.empty()) {
        int r_m = std::min_element(segments.begin(), segments.end(),
            [](const std::pair<int, int> &a, const std::pair<int, int> &b) {
                return a.second < b.second;
            })->second;
        points.push_back(r_m);
        segments.erase(std::remove_if(segments.begin(), segments.end(),
            [r_m](const std::pair<int, int> &seg) {
                return seg.first <= r_m && seg.second >= r_m;
            }), segments.end());
    }
    return points;
}

int main() {
    int n;
    std::cin >> n;
    std::vector<std::pair<int, int>> segments;
    for (int i = 0; i < n; ++i) {
        int l, r;
        std::cin >> l >> r;
        segments.push_back(std::make_pair(l, r));
    }
    std::vector<int> result = SegmentsCover(segments);
    std::cout << result.size() << std::endl;
    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i];
        if (i != result.size() - 1) {
            std::cout << " ";
        }
    }
    std::cout << std::endl;
    return 0;
}