#include <iostream>
#include <vector>
#include <algorithm>

long long Revenue(std::vector<long long> Click, std::vector<long long> Price) {
    long long revenue = 0;
    while (!Click.empty()) {
        auto maxClickIndex = std::distance(Click.begin(), std::max_element(Click.begin(), Click.end()));
        auto maxPriceIndex = std::distance(Price.begin(), std::max_element(Price.begin(), Price.end()));
        revenue += Click[maxClickIndex] * Price[maxPriceIndex];
        Click.erase(Click.begin() + maxClickIndex);
        Price.erase(Price.begin() + maxPriceIndex);
    }
    return revenue;
}

int main() {
    int n;
    std::cin >> n;
    std::vector<long long> prices(n);
    std::vector<long long> clicks(n);

    for (int i = 0; i < n; ++i) {
        std::cin >> prices[i];
    }

    for (int i = 0; i < n; ++i) {
        std::cin >> clicks[i];
    }


    long long total_profit = 0;
    total_profit = Revenue(clicks, prices);

    std::cout << total_profit << std::endl;

    return 0;
}