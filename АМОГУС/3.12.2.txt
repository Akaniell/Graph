#include <iostream>
#include <vector>

long long mergeAndCount(std::vector<int>& arr, int left, int mid, int right) {
    int i = left, j = mid + 1;
    long long count = 0;
    while (i <= mid && j <= right) {
        if (arr[i] >= arr[j]) {
            count += mid - i + 1;  // Counting the number of half inversions
            j++;
        } else {
            i++;
        }
    }

    std::vector<int> temp(right - left + 1);
    i = left, j = mid + 1;
    int k = 0;
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
    }

    while (i <= mid) {
        temp[k++] = arr[i++];
    }
    while (j <= right) {
        temp[k++] = arr[j++];
    }

    for (int p = left; p <= right; p++) {
        arr[p] = temp[p - left];
    }

    return count;
}

long long mergeSortAndCount(std::vector<int>& arr, int left, int right) {
    long long count = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;
        count += mergeSortAndCount(arr, left, mid);
        count += mergeSortAndCount(arr, mid + 1, right);
        count += mergeAndCount(arr, left, mid, right);
    }
    return count;
}

long long countHalfInversions(std::vector<int>& arr) {
    return mergeSortAndCount(arr, 0, arr.size() - 1);
}

int main() {
    int n;
    std::vector<int> arr;

    std::cin >> n;
    arr.resize(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }
    std::cout << countHalfInversions(arr) << std::endl;

    return 0;
}