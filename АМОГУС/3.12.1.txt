#include <iostream>
#include <vector>

std::pair<std::vector<int>, long long> merge(std::vector<int>& leftHalf, std::vector<int>& rightHalf) {
    std::vector<int> sortedList;
    long long inversions = 0;

    size_t i = 0, j = 0;
    while (i < leftHalf.size() && j < rightHalf.size()) {
        if (leftHalf[i] <= rightHalf[j]) {
            sortedList.push_back(leftHalf[i]);
            i++;
        } else {
            sortedList.push_back(rightHalf[j]);
            j++;
            inversions += leftHalf.size() - i;
        }
    }

    while (i < leftHalf.size()) {
        sortedList.push_back(leftHalf[i]);
        i++;
    }

    while (j < rightHalf.size()) {
        sortedList.push_back(rightHalf[j]);
        j++;
    }

    return {sortedList, inversions};
}

std::pair<std::vector<int>, long long> countInversions(std::vector<int>& list) {
    if (list.size() <= 1) {
        return {list, 0};
    }

    size_t middle = list.size() / 2;
    std::vector<int> leftHalf(list.begin(), list.begin() + middle);
    std::vector<int> rightHalf(list.begin() + middle, list.end());

    auto leftResult = countInversions(leftHalf);
    auto rightResult = countInversions(rightHalf);

    auto mergedResult = merge(leftResult.first, rightResult.first);
    long long totalInversions = leftResult.second + rightResult.second + mergedResult.second;

    return {mergedResult.first, totalInversions};
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> input(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> input[i];
    }

    auto result = countInversions(input);
    std::cout << result.second << std::endl;
    return 0;
}